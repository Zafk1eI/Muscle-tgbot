from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from utils.fsm import Form
import keyboards.keyboard as kb
from db import methods, models

router = Router()


@router.message(F.text.lower() == '–Ω–∞—á–∞—Ç—å')
async def start_game(message: Message, state: FSMContext) -> None:
    record = await methods.get_random_record()
    all_record = await methods.user_has_seen_all_records(message.from_user.id)
    if all_record:
        while await models.UsersMuscles.exists(user_id=message.from_user.id, muscle_id_id=record.id):
            record = await methods.get_random_record()
            print(record.name)
        await state.update_data(RECORD_DATA=record)
        image_path = FSInputFile(record.image_path)
        print(image_path.path)
        answer_list = await kb.generate_list(record.name)
        await message.answer_photo(image_path, reply_markup=kb.generate_answer_keyboard(answer_list, record.name))
    else:
        await message.answer(
            '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—Å—è, –Ω–æ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω–æ'
            '–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞—á–∞—Ç—å.', reply_markup=kb.main_keyboard(all_record))
        await models.UsersMuscles.filter(user_id=message.from_user.id).delete()


@router.message(F.text.lower() == '—Ç–æ–ø')
async def get_top_users(message: Message):
    users = await methods.get_top_10_users()
    message_text = "Top 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, user in enumerate(users, start=1):
        message_text += f"{i}. {user.username} —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ {user.answer_count} –≤–æ–ø—Ä–æ—Å–æ–≤üëç\n"
    await message.answer(message_text)


@router.message(F.text.lower() == '–≤–æ–ø—Ä–æ—Å')
async def difficult_game(message: Message, state: FSMContext) -> None:
    record = await methods.get_random_record()
    if await methods.user_has_seen_all_records(message.from_user.id):
        while await models.UsersMuscles.exists(user_id=message.from_user.id, muscle_id_id=record.id):
            record = await methods.get_random_record()
            print(record.name)
        await state.update_data(RECORD_DATA=record)
        image_path = FSInputFile(record.image_path)
        print(image_path.path)
        await message.answer_photo(image_path)
        await message.answer("–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–µ–∫—Å—Ç–∞")
        await state.set_state(Form.input)
    else:
        await message.answer(
            '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—Å—è, –Ω–æ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –ø–∏—Å—å–º–µ–Ω–Ω–æ'
            ' –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞—á–∞—Ç—å.',
            reply_markup=kb.main_keyboard(await methods.user_has_seen_all_records(message.from_user.id)))
        await models.UsersMuscles.filter(user_id=message.from_user.id).delete()


@router.message(F.text.lower() == '–Ω–∞–∑–∞–¥')
async def process_answer(message: Message) -> None:
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏',
                         reply_markup=kb.main_keyboard(await methods.user_has_seen_all_records(message.from_user.id)))


@router.message(Form.input)
async def process_answer(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    record = data.get('RECORD_DATA')
    user_answer = message.text.lower().strip()
    correct_answer = record.name.lower().strip()
    if user_answer == correct_answer:
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        new_answer = await models.UsersMuscles(user_id=message.from_user.id, muscle_id_id=record.id)
        await new_answer.save()
        user = await models.User.get(user_id=message.from_user.id)
        user.answer_count += 1
        await user.save()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        await message.answer(text=f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —ç—Ç–æ {record.name}')
    await state.clear()


@router.callback_query(lambda f: f.data == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ' or f.data == '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')
async def callback_input_data(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    data = await state.get_data()
    record = data.get('RECORD_DATA')
    print("Retrieved record:", record)
    if callback.data == "–ü—Ä–∞–≤–∏–ª—å–Ω–æ":
        await callback.message.answer(text='–ú–æ–ª–æ–¥–µ—Ü, –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
        if not await models.UsersMuscles.exists(user_id=callback.from_user.id, muscle_id_id=record.id):
            new_answer = await models.UsersMuscles(user_id=callback.from_user.id, muscle_id_id=record.id)
            await new_answer.save()
        user = await models.User.get(user_id=callback.from_user.id)
        user.answer_count += 1
        await user.save()
    elif callback.data == "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ":
        await callback.message.answer(text=f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —ç—Ç–æ {record.name}')
    await callback.message.delete_reply_markup()
    await state.clear()


@router.message(Command('help'))
async def command_help(message: Message) -> None:
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–ê–ß–ê–¢–¨"')


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f'''–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –º—ã—à—Ü!
–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è? –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º—ã—à—Ü. 
–ü–æ–ø—Ä–æ–±—É–π –¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã! –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /help. 
–£–¥–∞—á–∏ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π!''', reply_markup=kb.main_keyboard(True))
